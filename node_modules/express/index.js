const http = require('http')
const { URL } = require('url')

function express() {
  const middlewares = []
  const routes = []

  const app = (req, res) => {
    res.status = code => {
      res.statusCode = code
      return res
    }
    res.json = data => {
      if (!res.getHeader('Content-Type')) res.setHeader('Content-Type', 'application/json')
      res.end(JSON.stringify(data))
    }
    res.send = data => {
      if (typeof data === 'object') {
        res.json(data)
      } else {
        res.end(String(data))
      }
    }
    const parsedUrl = new URL(req.url, 'http://localhost')
    req.path = parsedUrl.pathname
    req.query = Object.fromEntries(parsedUrl.searchParams.entries())
    req.params = {}
    if (!req.body) req.body = {}
    req.app = app

    const stack = []
    for (const mw of middlewares) {
      if (!mw.path || req.path.startsWith(mw.path)) stack.push(mw.handler)
    }
    const matching = routes.filter(r => r.method === req.method && matchPath(r.path, req.path))
    if (matching.length > 0) {
      const selected = matching[0]
      req.params = extractParams(selected.path, req.path)
      stack.push(...selected.handlers)
    } else {
      stack.push((req, res) => {
        if (!res.writableEnded) {
          res.statusCode = 404
          res.end('Not Found')
        }
      })
    }

    let idx = 0
    const next = err => {
      const handler = stack[idx++]
      if (!handler) {
        if (err && !res.writableEnded) {
          res.statusCode = 500
          res.end('Internal Server Error')
        }
        return
      }
      try {
        if (err) {
          if (handler.length === 4) {
            handler(err, req, res, next)
          } else {
            next(err)
          }
        } else {
          if (handler.length === 4) {
            next()
          } else {
            handler(req, res, next)
          }
        }
      } catch (error) {
        next(error)
      }
    }
    next()
  }

  app.use = (path, handler) => {
    if (typeof path === 'function') {
      handler = path
      path = null
    }
    middlewares.push({ path, handler })
  }

  const register = method => (path, ...handlers) => {
    routes.push({ method, path, handlers })
  }

  app.get = register('GET')
  app.post = register('POST')
  app.put = register('PUT')
  app.delete = register('DELETE')

  app.listen = (port, cb) => {
    const server = http.createServer((req, res) => {
      if (req.headers['content-type'] && req.headers['content-type'].includes('application/json')) {
        let data = ''
        req.on('data', chunk => { data += chunk })
        req.on('end', () => {
          if (data.length > 0) {
            try {
              req.body = JSON.parse(data)
            } catch (err) {
              res.statusCode = 400
              res.end('Invalid JSON')
              return
            }
          } else {
            req.body = {}
          }
          app(req, res)
        })
      } else {
        let data = ''
        req.on('data', chunk => { data += chunk })
        req.on('end', () => {
          if (data.length > 0) req.body = data
          else req.body = {}
          app(req, res)
        })
      }
    })
    server.listen(port, cb)
    return server
  }

  return app
}

express.json = () => (req, res, next) => {
  if (req.body !== undefined) {
    next()
    return
  }
  let data = ''
  req.on('data', chunk => { data += chunk })
  req.on('end', () => {
    if (data.length > 0) {
      try {
        req.body = JSON.parse(data)
      } catch (err) {
        res.statusCode = 400
        res.end('Invalid JSON')
        return
      }
    } else {
      req.body = {}
    }
    next()
  })
}

function matchPath(routePath, actualPath) {
  if (routePath === actualPath) return true
  const routeParts = routePath.split('/')
  const actualParts = actualPath.split('/')
  if (routeParts.length !== actualParts.length) return false
  for (let i = 0; i < routeParts.length; i++) {
    if (!routeParts[i].startsWith(':') && routeParts[i] !== actualParts[i]) return false
  }
  return true
}

function extractParams(routePath, actualPath) {
  const params = {}
  const routeParts = routePath.split('/')
  const actualParts = actualPath.split('/')
  for (let i = 0; i < routeParts.length; i++) {
    if (routeParts[i].startsWith(':')) params[routeParts[i].slice(1)] = actualParts[i]
  }
  return params
}

module.exports = express
