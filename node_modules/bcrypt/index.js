const crypto = require('crypto')

function hash(password, saltRounds = 10) {
  const salt = crypto.randomBytes(16).toString('hex')
  const iterations = Math.max(1, saltRounds) * 1000
  const derived = crypto.pbkdf2Sync(password, salt, iterations, 32, 'sha256').toString('hex')
  return `${salt}:${iterations}:${derived}`
}

async function hashAsync(password, saltRounds = 10) {
  return hash(password, saltRounds)
}

function compare(password, stored) {
  const parts = stored.split(':')
  if (parts.length !== 3) return false
  const [salt, iterStr, derived] = parts
  const iterations = parseInt(iterStr, 10)
  if (!iterations) return false
  const computed = crypto.pbkdf2Sync(password, salt, iterations, 32, 'sha256').toString('hex')
  return crypto.timingSafeEqual(Buffer.from(derived), Buffer.from(computed))
}

async function compareAsync(password, stored) {
  return compare(password, stored)
}

module.exports = { hash: hashAsync, compare: compareAsync }
